#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SYM_DIR="$( dirname "$( readlink ${BASH_SOURCE[0]} )" )"
BIN_DIR="${DIR}/${SYM_DIR}"

GREEN='\033[32m'
YELLOW='\033[33m'
RED='\033[31m'
NOCOLOR='\033[0m'

PASS_TLINT=true
PASS_PHPCS=true
PASS_PHPCSFIXER=true
PASS_PINT=true

# Clean Duster arguments to pass to the underlying linters
function _args() {
  for arg in "$@"; do
    [[ ! $arg == 'github-actions' ]] \
    && [[ ! $arg == 'pint' ]] \
    && [[ ! $arg == 'phpcsfixer' ]] \
    && [[ ! $arg == 'phpcs' ]] \
    && [[ ! $arg == 'tlint' ]] \
    && [[ ! $arg == 'fix' ]] \
    && [[ ! $arg == 'lint' ]] \
    && args+=("$arg")
  done

  echo "${args[@]}"
}

############################################################
# Help                                                     #
############################################################

function _help()
{
  echo -e "Duster Commands:"
  echo -e "${GREEN}duster${NOCOLOR}                     lint using ${YELLOW}all${NOCOLOR}"
  echo -e "${GREEN}duster lint${NOCOLOR}                lint using ${YELLOW}all${NOCOLOR}"
  echo -e "${GREEN}duster fix${NOCOLOR}                 fix using ${YELLOW}all${NOCOLOR}"
  echo -e "${GREEN}duster tlint${NOCOLOR}               lint using ${YELLOW}TLint${NOCOLOR}"
  echo -e "${GREEN}duster tlint fix${NOCOLOR}           fix using ${YELLOW}TLint${NOCOLOR}"
  echo -e "${GREEN}duster phpcs${NOCOLOR}               lint using ${YELLOW}PHP_CodeSniffer${NOCOLOR}"
  echo -e "${GREEN}duster phpcs fix${NOCOLOR}           fix using ${YELLOW}PHP_CodeSniffer${NOCOLOR}"
  echo -e "${GREEN}duster phpcsfixer${NOCOLOR}          lint using ${YELLOW}PHP CS Fixer${NOCOLOR}"
  echo -e "${GREEN}duster phpcsfixer fix${NOCOLOR}      fix using ${YELLOW}PHP CS Fixer${NOCOLOR}"
  echo -e "${GREEN}duster pint${NOCOLOR}                lint using ${YELLOW}Pint${NOCOLOR}"
  echo -e "${GREEN}duster pint fix${NOCOLOR}            fix using ${YELLOW}Pint${NOCOLOR}"
  echo -e "${GREEN}duster github-actions${NOCOLOR}      publish GitHub Actions"
  echo -e "${GREEN}duster help${NOCOLOR}                display this help"
}

############################################################
# GitHub Actions                                           #
############################################################

function _github_actions()
{
  printf "\nChecking GitHub Actions...\n\n"

  gh_actions_filename=".github/workflows/lint.yml"

  if [ -f "$gh_actions_filename" ]; then
    printf "$gh_actions_filename already exists.\n"
  else
    printf "\nAdding GitHub Actions workflow...\n"

    mkdir -p .github/workflows
    cp ${BIN_DIR}/../stubs/github-actions/lint.yml $gh_actions_filename

    read -p "Enter the name of your primary branch [main]: " primary_branch
    primary_branch=${primary_branch:-main}
    sed -i '' "s/YOUR_BRANCH_NAME/${primary_branch}/g" $gh_actions_filename

    read -p "Enter your PHP version [8.1]: " php_version
    php_version=${php_version:-8.1}
    sed -i '' "s/YOUR_PHP_VERSION/${php_version}/g" $gh_actions_filename

    printf "\nCreated $gh_actions_filename.\n"
  fi
}

############################################################
# Pint                                                     #
############################################################

function _pint_fix()
{
  if [[ -f "./.pint.json" ]]; then
    vendor/bin/pint $@
  else
    vendor/bin/pint --config vendor/tightenco/duster/pint.json $@
  fi

  if [ $? -ne 0 ]; then
    PASS_PINT=false
  fi
}

function _pint_lint()
{
  if [[ -f "./.pint.json" ]]; then
    vendor/bin/pint --test $@
  else
    vendor/bin/pint --config vendor/tightenco/duster/pint.json --test $@
  fi

  if [ $? -ne 0 ]; then
    PASS_PINT=false
  fi
}

############################################################
# PHP CS Fixer                                             #
############################################################

function _phpcsfixer_fix()
{
  if [[ -f "./.php-cs-fixer.dist.php" ]] || [[ -f "./.php-cs-fixer.php" ]]; then
    vendor/bin/php-cs-fixer fix $@
  else
    vendor/bin/php-cs-fixer fix --config=vendor/tightenco/duster/.php-cs-fixer.dist.php $@
  fi

  if [ $? -ne 0 ]; then
    PASS_PHPCSFIXER=false
  fi
}

function _phpcsfixer_lint()
{
  if [[ -f "./.php-cs-fixer.dist.php" ]] || [[ -f "./.php-cs-fixer.php" ]]; then
    vendor/bin/php-cs-fixer fix --diff --dry-run $@
  else
    vendor/bin/php-cs-fixer fix --config=vendor/tightenco/duster/.php-cs-fixer.dist.php --diff --dry-run $@
  fi

  if [ $? -ne 0 ]; then
    PASS_PHPCSFIXER=false
  fi
}

############################################################
# PHP PHP_CodeSniffer                                      #
############################################################

function _phpcs_fix()
{
  if [[ -f "./.phpcs.xml" ]] || [[ -f "./phpcs.xml" ]] || [[ -f "./.phpcs.xml.dist" ]] || [[ -f "./phpcs.xml.dist" ]]; then
    vendor/bin/phpcbf --config-set installed_paths ../../tightenco/duster/standards/Tighten > /dev/null
    vendor/bin/phpcbf $@
    if [ $? -ne 0 ]; then
      PASS_PHPCS=false
    fi

    vendor/bin/phpcs -n $@ > /dev/null
  else
    args="app config database public resources routes tests" && [[ -n "$@" ]] && args=$@
    vendor/bin/phpcbf --standard=vendor/tightenco/duster/standards/Tighten/ $args
    if [ $? -ne 0 ]; then
      PASS_PHPCS=false
    fi

    vendor/bin/phpcs -n --standard=vendor/tightenco/duster/standards/Tighten/ $args > /dev/null
  fi

  if [ $? -ne 0 ]; then
    echo -e "${RED}WARNING${NOCOLOR} PHP Code_Sniffer found errors that cannot be fixed automatically. Run 'duster phpcs' to view them.\n"
  fi
}

function _phpcs_lint()
{
  if [[ -f "./.phpcs.xml" ]] || [[ -f "./phpcs.xml" ]] || [[ -f "./.phpcs.xml.dist" ]] || [[ -f "./phpcs.xml.dist" ]]; then
    vendor/bin/phpcs --config-set installed_paths ../../tightenco/duster/standards/Tighten > /dev/null
    vendor/bin/phpcs $@
  else
    args="app config database public resources routes tests" && [[ -n "$@" ]] && args=$@
    vendor/bin/phpcs --standard=vendor/tightenco/duster/standards/Tighten/ $args
  fi

  if [ $? -ne 0 ]; then
    PASS_PHPCS=false
  fi
}

############################################################
# TLint                                                    #
############################################################

function _tlint_fix()
{
  if [ -z "$@" ]; then
    vendor/bin/tlint --ansi format
    if [ $? -ne 0 ]; then
      PASS_TLINT=false
    fi
  fi

  for path in $@
  do
    vendor/bin/tlint --ansi format "$path"
    if [ $? -ne 0 ]; then
      PASS_TLINT=false
    fi
  done
}

function _tlint_lint()
{
  if [ -z "$@" ]; then
    vendor/bin/tlint --ansi lint
    if [ $? -ne 0 ]; then
      PASS_TLINT=false
    fi
  fi

  for path in $@
  do
    vendor/bin/tlint --ansi lint "$path"
    if [ $? -ne 0 ]; then
      PASS_TLINT=false
    fi
  done
}

############################################################
# All Tools                                                #
############################################################

function _lint()
{
  _tlint_lint $@
  _phpcs_lint $@
  _phpcsfixer_lint $@
  _pint_lint $@

  if [ $PASS_TLINT == false ] || [ $PASS_PHPCS == false ] || [ $PASS_PHPCSFIXER == false ] || [ $PASS_PINT == false ]; then
    exit 1
  else
    exit 0
  fi
}

function _fix()
{
  _tlint_fix $@
  _phpcs_fix $@
  _phpcsfixer_fix $@
  _pint_fix $@

  if [ $PASS_TLINT == false ] || [ $PASS_PHPCS == false ] || [ $PASS_PHPCSFIXER == false ] || [ $PASS_PINT == false ]; then
    exit 1
  else
    exit 0
  fi
}

############################################################
# Main                                                     #
############################################################

if [[ "$*" == *"help"* ]]; then
  action='_help'
elif [[ "$*" == *"github-actions"* ]]; then
  action='_github_actions'
elif [[ "$*" == *"pint"* ]] && [[ "$*" == *"fix"* ]]; then
  action='_pint_fix'
elif [[ "$*" == *"pint"* ]]; then
  action='_pint_lint'
elif [[ "$*" == *"phpcsfixer"* ]] && [[ "$*" == *"fix"* ]]; then
  action='_phpcsfixer_fix'
elif [[ "$*" == *"phpcsfixer"* ]]; then
  action='_phpcsfixer_lint'
elif [[ "$*" == *"phpcs"* ]] && [[ "$*" == *"fix"* ]]; then
  action='_phpcs_fix'
elif [[ "$*" == *"phpcs"* ]]; then
  action='_phpcs_lint'
elif [[ "$*" == *"tlint"* ]] && [[ "$*" == *"fix"* ]]; then
  action='_tlint_fix'
elif [[ "$*" == *"tlint"* ]]; then
  action='_tlint_lint'
elif [[ "$*" == *"fix"* ]]; then
  action='_fix'
else
  action='_lint'
fi

$action $(_args $@)

exit 1
